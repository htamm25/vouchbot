#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script test kh·ªüi ƒë·ªông bot v·ªõi mock environment
"""

import os
import sys
import tempfile
import asyncio
from unittest.mock import patch, MagicMock

def test_bot_initialization():
    """Test kh·ªüi t·∫°o bot object"""
    try:
        # Set mock environment
        os.environ['DISCORD_TOKEN'] = 'mock_token_for_testing'
        
        # Import sau khi set env
        import discord
        from discord.ext import commands
        
        # Test t·∫°o intents
        intents = discord.Intents.default()
        intents.message_content = False
        intents.guilds = True
        intents.guild_messages = True
        
        # Test t·∫°o bot
        bot = commands.Bot(command_prefix="/", intents=intents)
        
        print("‚úÖ Bot object ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
        print(f"   - Bot user: {bot.user}")
        print(f"   - Command prefix: {bot.command_prefix}")
        print(f"   - Intents: guilds={intents.guilds}, messages={intents.guild_messages}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi t·∫°o bot: {e}")
        return False

def test_config_functions():
    """Test c√°c functions load/save config"""
    try:
        # Import functions t·ª´ file ch√≠nh
        sys.path.insert(0, '.')
        
        # Test v·ªõi temporary file
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            temp_config = f.name
            
        # Mock CONFIG_FILE
        with patch('vouch_bot1.CONFIG_FILE', temp_config):
            from vouch_bot1 import load_config, save_config
            
            # Test save config
            test_data = {"test_guild": {"thankyou": "Test message"}}
            save_config(test_data)
            
            # Test load config
            loaded_data = load_config()
            
            if loaded_data == test_data:
                print("‚úÖ Config load/save functions ho·∫°t ƒë·ªông t·ªët!")
                result = True
            else:
                print(f"‚ùå Config data kh√¥ng kh·ªõp: {loaded_data} != {test_data}")
                result = False
                
        # Cleanup
        os.unlink(temp_config)
        return result
        
    except Exception as e:
        print(f"‚ùå L·ªói test config functions: {e}")
        return False

def test_modal_classes():
    """Test c√°c Modal classes"""
    try:
        # Test import classes
        from vouch_bot1 import ThankYouModal, FeedbackModal, StarButton, VouchView
        
        print("‚úÖ ThankYouModal class import th√†nh c√¥ng")
        print("‚úÖ FeedbackModal class import th√†nh c√¥ng")
        print("‚úÖ StarButton class import th√†nh c√¥ng")
        print("‚úÖ VouchView class import th√†nh c√¥ng")
        
        # Test class attributes
        if hasattr(ThankYouModal, 'on_submit'):
            print("‚úÖ ThankYouModal c√≥ method on_submit")
        
        if hasattr(FeedbackModal, 'on_submit'):
            print("‚úÖ FeedbackModal c√≥ method on_submit")
            
        if hasattr(StarButton, 'callback'):
            print("‚úÖ StarButton c√≥ method callback")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói test modal classes: {e}")
        return False

def main():
    print("üß™ Test kh·ªüi ƒë·ªông VouchBot...\n")
    
    tests = [
        ("Bot initialization", test_bot_initialization),
        ("Config functions", test_config_functions),
        ("Modal classes", test_modal_classes)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"Testing {test_name}:")
        if test_func():
            passed += 1
        print()
    
    print(f"üìä K·∫øt qu·∫£: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ T·∫•t c·∫£ tests PASS! Bot s·∫µn s√†ng ho·∫°t ƒë·ªông.")
        return 0
    else:
        print("‚ùå M·ªôt s·ªë tests FAIL! C·∫ßn ki·ªÉm tra l·∫°i.")
        return 1

if __name__ == "__main__":
    sys.exit(main())